## Resources:
Pluralsight
OCP11 book
Serialization pdf
Effective Java - Serialization
OCP11 practice tests
Udemy OCP11 practice tests



##############
# Pluralsight
##############

## Introduction
- data = bytes and chars
- read/write data to memory + disk + network
- network is not in certification scope

- Java IO - Java v1 - 1995
- Java NIO - Java v1.4 - 2004
- Java NIO2 - Java v7 - 2011

- Reading chars = Reader
- Writing chars = Writer

- Reading bytes = InputStream
- Writing bytes = OutputStream

- Reading characters from a File
                 Reader
    |               |              |
FileReader    StringReader    CharArrayReader

- to create a Reader, need:
a File to create a FileReader
a String to create a StringReader
a char[] to create a CharArrayReader

- Reader class has abstract methods:
close()
read(char[], int, int)

- non-abstract methods:
read()
read(char[])
read(CharBuffer)


## File and Path
- to deal with files, 2 APIs:
File from Java IO
Path from Java NIO2

- key points for File
create and delete file
create dir
analyze the path
get the real path to a file or dir
creating a new File("...") does NOT creates a file

- with Files
copy and move files

- demo code
PlayWithFiles

- Why another model for a Path?
File does not know the underlying OS file system and is independent of it
so, not possible to access specific features of underlying OS
Solution: one interface with specific implementations of each file systems

- demo code
PlayWithPath

- 2 ways to create path
Path path1 = Paths.get("c:/images/seaside.jpg");

// new in Java 11
Path path2 = Path.of("mountain.jpg");


## Reading and Writing Characters
- Reader and Writer
- demo code
PlayWithReader
PlayWithWriter

- new way to create buffered reader/writer
BufferedReader reader = Files.newBufferedReader(path)
BufferedWriter writer = Files.newBufferedWriter(path)

- 2 ways to read from buffered reader
String line = reader.readLine();
Stream<String> lines = reader.lines();


## Reading and Writing Bytes
- InputStream and OutputStream
- FileInputStream and ByteArrayInputStream
- there are data and object streams also

- demo code
PlayWithInputStream = FileOutputStream, FileInputStream
ReadingCharactersFromBytes = OutputStreamWriter, InputStreamReader, ByteArrayOutputStream, ByteArrayInputStream
PlayWithDataStream = DataOutputStream, DataInputStream, ByteArrayOutputStream, ByteArrayInputStream
PlayWithObjectStream = ObjectOutputStream, ObjectInputStream, FileOutputStream, FileInputStream

- OutputStreamWriter needs to wrap up an OutputStream like ByteArrayOutputStream
- InputStreamReader needs to wrap up an InputStream like ByteArrayInputStream


## Using Console
- only 1 singleton object and thread-safe
Console console = System.console();

- code will fail if run in intellij
- so run on terminal

- can get writer / reader from this object
PrintWriter writer = console.writer(); // can not be closed - always return the same object
Reader reader = console.reader(); // can not be closed - always return the same object
String name = console.readLine();
char[] chars = console.readPassword();

- Scanner is inside java.util
- Scanner can be opened on any reader



#############
# OCP11 book
#############
Chapter 19: I/O

# Conceptualizing the file system
- file system is in charge of reading and writing data within a computer
- Windows-based systems use a different file system than Unix-based systems
- JVM will automatically connect to the local file system

- Root directory is the topmost directory in the file system
- Windows - drive name such as c:\
- Unix - forward slash /

- Path is a String representation of a file or directory within a file system
- each file system has its own path separator
- value to the left of the separator is the parent of the value to the right
- paths can be absolute or relative

# Storing data as bytes
- Data is stored in a file system and memory as a 0 or 1 called a bit



